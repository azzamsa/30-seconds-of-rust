name: CI

env:
  MIN_SUPPORTED_RUST_VERSION: "1.63.0"

on: [push, pull_request]

jobs:
  code_quality:
    name: Code Quality
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          profile: minimal # no documentation
          components: clippy, rustfmt

      - name: Cache
        uses: Swatinem/rust-cache@v1

      - name: Install dprint
        run: |
          curl --location https://github.com/dprint/dprint/releases/download/0.30.3/dprint-x86_64-unknown-linux-gnu.zip --output dprint.zip
          unzip dprint.zip
          cp dprint ~/.cargo/bin/
          dprint --version

      - name: Ensure `fmt` has been run
        run:  make fmt_check

      - name: Ensure MSRV is set in `clippy.toml`
        run: grep "^msrv = \"${{ env.MIN_SUPPORTED_RUST_VERSION }}\"\$" clippy.toml

      - name: Run clippy
        env:
          SQLX_OFFLINE: true
        run: make lint


  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install rust toolchain (v${{ env.MIN_SUPPORTED_RUST_VERSION }})
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.MIN_SUPPORTED_RUST_VERSION }}
          default: true
          profile: minimal

      - name: Cache
        uses: Swatinem/rust-cache@v1

      - name: Run tests
        run: make test

  build:
    name: Build (${{ matrix.job.os }}, ${{ matrix.job.target }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-20.04, target: x86_64-unknown-linux-gnu    }
          - { os: ubuntu-20.04, target: x86_64-unknown-linux-musl   , use-cross: true }
          - { os: macos-10.15 , target: x86_64-apple-darwin         }
          - { os: windows-2019, target: x86_64-pc-windows-msvc      }

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true
          profile: minimal

      - name: Cache
        uses: Swatinem/rust-cache@v1

      - name: Show version information (Rust, cargo, GCC)
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.job.use-cross }}
          command: build
          args: --release --target=${{ matrix.job.target }}
